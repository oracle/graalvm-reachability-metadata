/*
 * Copyright and related rights waived via CC0
 *
 * You should have received a copy of the CC0 legalcode along with this
 * work. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

plugins {
    id 'org.graalvm.internal.tck-base'
}

import groovy.json.JsonOutput
import org.graalvm.internal.tck.ScaffoldTask
import org.graalvm.internal.tck.harness.tasks.CheckstyleInvocationTask
import org.graalvm.internal.tck.harness.tasks.TestInvocationTask

import static org.graalvm.internal.tck.Utils.generateTaskName

logger.lifecycle("GraalVM Reachability Metadata TCK")
logger.lifecycle("---------------------------------")

String coordinateFilter = Objects.requireNonNullElse(project.findProperty("coordinates"), "")
List<String> matchingCoordinates = tck.getMatchingCoordinates(coordinateFilter)

// gradle test -Pcoordinates=<maven-coordinates>
Provider<Task> test = tasks.register("test", DefaultTask) { task ->
    task.setDescription("Tests GraalVM Reflection Metadata that matches given coordinates")
    task.setGroup(JavaBasePlugin.VERIFICATION_GROUP)
}

// gradle checkstyle -Pcoordinates=<maven-coordinates>
Provider<Task> checkstyle = tasks.register("checkstyle") { task ->
    task.setDescription("Runs checkstyle on all subprojects")
    task.setGroup(JavaBasePlugin.VERIFICATION_GROUP)
}

tasks.named("check").configure {
    dependsOn(checkstyle)
}

// Here we want to configure all test and checkstyle tasks for all filtered subprojects
for (String coordinates in matchingCoordinates) {
    String testTaskName = generateTaskName("test", coordinates)
    if ((!tasks.getNames().contains(testTaskName))) {
        tasks.register(testTaskName, TestInvocationTask, coordinates)
    }
    test.configure {
        dependsOn(testTaskName)
    }

    String checkstyleTaskName = generateTaskName("checkstyle", coordinates)
    if ((!tasks.getNames().contains(checkstyleTaskName))) {
        tasks.register(checkstyleTaskName, CheckstyleInvocationTask, coordinates)
    }
    checkstyle.configure {
        dependsOn(checkstyleTaskName)
    }
}

// gradle diff -PbaseCommit=<base-commit> -PnewCommit=<new-commit>
Provider<Task> diff = tasks.register("diff", DefaultTask) { task ->
    task.setDescription("Tests GraalVM Reflection Metadata that was changed between 'baseCommit' and 'newCommit'")
    task.setGroup(JavaBasePlugin.VERIFICATION_GROUP)

    if (!project.hasProperty("baseCommit")) {
        task.doFirst {
            throw new GradleException("Missing 'baseCommit' property! Rerun Gradle with '-PbaseCommit=<commit-hash>'")
        }
    }
}

List<String> diffCoordinates = new ArrayList<>()
if (project.hasProperty("baseCommit")) {
    String baseCommit = project.findProperty("baseCommit")
    String newCommit = Objects.requireNonNullElse(project.findProperty("newCommit"), "HEAD")
    for (def coordinates in tck.diffCoordinates(baseCommit, newCommit)) {
        diffCoordinates.add(coordinates)
        String taskTaskName = generateTaskName("test", coordinates)
        if ((!tasks.getNames().contains(taskTaskName))) {
            tasks.register(taskTaskName, TestInvocationTask, coordinates)
        }
        diff.configure {
            dependsOn(taskTaskName)
        }
    }
}

def matrixDefault = [
        "versions" : [
                [ "graalvm": "dev", "java": "dev" ],
                [ "graalvm": "latest", "java": "17"]
        ],
        "os"          : ["ubuntu-latest"] // TODO: Add support for "windows-latest", "macos-latest"
]

final String METADATA_GROUP = "Metadata"

// gradle generateMatrixMatchingCoordinates -Pcoordinates=<maven-coordinates>
Provider<Task> generateMatrixMatchingCoordinates = tasks.register("generateMatrixMatchingCoordinates", DefaultTask) { task ->
    task.setDescription("Returns matrix definition populated with all matching coordinates")
    task.setGroup(METADATA_GROUP)
    task.doFirst {
        def matrix = [
                "coordinates": matchingCoordinates
        ]
        matrix.putAll(matrixDefault)
        println "::set-output name=matrix::${JsonOutput.toJson(matrix)}"
    }
}

// gradle generateMatrixDiffCoordinates -PbaseCommit=<base-commit> -PnewCommit=<new-commit>
Provider<Task> generateMatrixDiffCoordinates = tasks.register("generateMatrixDiffCoordinates", DefaultTask) { task ->
    task.setDescription("Returns matrix definition populated with coordinates of changed libraries")
    task.setGroup(METADATA_GROUP)
    task.doFirst {
        if (!project.hasProperty("baseCommit")) {
            throw new GradleException("Missing 'baseCommit' property! Rerun Gradle with '-PbaseCommit=<commit-hash>'")
        }
        if (diffCoordinates.isEmpty()) {
            def matrix = [
                "coordinates": ["No matches found!"]
            ]
            matrix.putAll(matrixDefault)
            println "No changed coordinates were found!"
            println "::set-output name=matrix::${JsonOutput.toJson(matrix)}"
            println "::set-output name=none-found::true"
        } else {
            def matrix = [
                    "coordinates": diffCoordinates
            ]
            matrix.putAll(matrixDefault)
            println "::set-output name=matrix::${JsonOutput.toJson(matrix)}"
            println "::set-output name=none-found::false"
        }
    }
}

tasks.register("scaffold", ScaffoldTask.class) { task ->
    task.setDescription("Creates a metadata and test scaffold for the given coordindates")
    task.setGroup(METADATA_GROUP)
    // Format JSON after task has been run
    task.finalizedBy("spotlessApply")
}
