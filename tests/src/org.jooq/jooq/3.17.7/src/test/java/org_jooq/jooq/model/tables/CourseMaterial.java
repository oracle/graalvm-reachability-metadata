/*
 * Copyright and related rights waived via CC0
 *
 * You should have received a copy of the CC0 legalcode along with this
 * work. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */
package org_jooq.jooq.model.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import org_jooq.jooq.model.College;
import org_jooq.jooq.model.Keys;
import org_jooq.jooq.model.tables.records.CourseMaterialRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CourseMaterial extends TableImpl<CourseMaterialRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>college.course_material</code>
     */
    public static final CourseMaterial COURSE_MATERIAL = new CourseMaterial();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CourseMaterialRecord> getRecordType() {
        return CourseMaterialRecord.class;
    }

    /**
     * The column <code>college.course_material.id</code>.
     */
    public final TableField<CourseMaterialRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>college.course_material.url</code>.
     */
    public final TableField<CourseMaterialRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>college.course_material.course_id</code>.
     */
    public final TableField<CourseMaterialRecord, Long> COURSE_ID = createField(DSL.name("course_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private CourseMaterial(Name alias, Table<CourseMaterialRecord> aliased) {
        this(alias, aliased, null);
    }

    private CourseMaterial(Name alias, Table<CourseMaterialRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>college.course_material</code> table reference
     */
    public CourseMaterial(String alias) {
        this(DSL.name(alias), COURSE_MATERIAL);
    }

    /**
     * Create an aliased <code>college.course_material</code> table reference
     */
    public CourseMaterial(Name alias) {
        this(alias, COURSE_MATERIAL);
    }

    /**
     * Create a <code>college.course_material</code> table reference
     */
    public CourseMaterial() {
        this(DSL.name("course_material"), null);
    }

    public <O extends Record> CourseMaterial(Table<O> child, ForeignKey<O, CourseMaterialRecord> key) {
        super(child, key, COURSE_MATERIAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : College.COLLEGE;
    }

    @Override
    public Identity<CourseMaterialRecord, Long> getIdentity() {
        return (Identity<CourseMaterialRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CourseMaterialRecord> getPrimaryKey() {
        return Keys.KEY_COURSE_MATERIAL_PRIMARY;
    }

    @Override
    public List<UniqueKey<CourseMaterialRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_COURSE_MATERIAL_COURSE_ID);
    }

    @Override
    public List<ForeignKey<CourseMaterialRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_COURSE_MATERIAL_COURSE_ID);
    }

    private transient Course _course;

    /**
     * Get the implicit join path to the <code>college.course</code> table.
     */
    public Course course() {
        if (_course == null)
            _course = new Course(this, Keys.FK_COURSE_MATERIAL_COURSE_ID);

        return _course;
    }

    @Override
    public CourseMaterial as(String alias) {
        return new CourseMaterial(DSL.name(alias), this);
    }

    @Override
    public CourseMaterial as(Name alias) {
        return new CourseMaterial(alias, this);
    }

    @Override
    public CourseMaterial as(Table<?> alias) {
        return new CourseMaterial(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CourseMaterial rename(String name) {
        return new CourseMaterial(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CourseMaterial rename(Name name) {
        return new CourseMaterial(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CourseMaterial rename(Table<?> name) {
        return new CourseMaterial(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
