/*
 * Copyright and related rights waived via CC0
 *
 * You should have received a copy of the CC0 legalcode along with this
 * work. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */


import groovy.json.JsonGenerator
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id "org.graalvm.internal.tck"
}

String libraryVersion = tck.testedLibraryVersion.get()

dependencies {
    testImplementation "org.apache.tomcat:tomcat-jdbc:$libraryVersion"
    testImplementation 'org.assertj:assertj-core:3.22.0'
    testImplementation 'com.h2database:h2:2.1.214'
    testImplementation 'org.mariadb.jdbc:mariadb-java-client:3.1.3'
    testImplementation 'com.microsoft.sqlserver:mssql-jdbc:12.2.0.jre11'
    testImplementation 'mysql:mysql-connector-java:8.0.32'
    testImplementation 'com.oracle.database.jdbc:ojdbc11:21.9.0.0'
    testImplementation 'org.postgresql:postgresql:42.6.0'
}

task deleteGeneratedMetadata(type: Delete) {
    delete files(project.projectDir.toString() + "/generated-metadata")
}

task updateGeneratedMetadata {
    doLast {
        final ant = new groovy.ant.AntBuilder()
        final metadataDir = project.projectDir.toString() + "/generated-metadata"

        // replace typeReachable value for entries generated by DriverTest test class
        ant.replace(file: metadataDir + "/reflect-config.json",
                token: "org_apache_tomcat.tomcat_jdbc.DriverTest",
                value: "org.apache.tomcat.jdbc.pool.PooledConnection")
        ant.replace(file: metadataDir + "/reflect-config.json",
                token: "org.apache.tomcat.jdbc.pool.ClassLoaderUtil",
                value: "org.apache.tomcat.jdbc.pool.PooledConnection")
    }
}

task prettyPrintGeneratedMetadata() {
    ConfigurableFileTree tree = fileTree(dir: 'generated-metadata', includes: ['**/*.json'])
    tree.each {File file ->
        def jsonSlurper = new JsonSlurper()
        def json = jsonSlurper.parse(file)
        def generator = new JsonGenerator.Options().build()
        def formatted = JsonOutput.prettyPrint(generator.toJson(json))
        file.withOutputStream { outputStream ->
            outputStream.write(formatted.bytes)
        }
    }
}

graalvmNative {
    agent {
        defaultMode = "conditional"
        modes {
            conditional {
                userCodeFilterPath = "metadata-user-code-filter.json"
                extraFilterPath = "metadata-extra-filter.json"
            }
        }
        metadataCopy {
            inputTaskNames.add("test")
            outputDirectories.add("generated-metadata")
            mergeWithExisting = true
        }
    }
}
