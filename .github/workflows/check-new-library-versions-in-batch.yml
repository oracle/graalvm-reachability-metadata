name: Check new library versions for batch

on:
  workflow_call:
    inputs:
      items:
        required: true
        type: string
      batch_id:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      items:
        required: true
        description: "JSON array of batch items"
        type: string
      batch_id:
        required: true
        description: "Represents the unique id of this batch"
        type: string

permissions: write-all

concurrency:
  group: "workflow = ${{ github.workflow }}, batch = ${{ inputs.batch_id }}"
  cancel-in-progress: false

jobs:
  process-batch:
    if: github.repository == 'oracle/graalvm-reachability-metadata'
    name: "üß™ Processing ${{ matrix.item }}"
    permissions: write-all
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        item: ${{ fromJson(inputs.items) }}
    steps:
      - name: "‚òÅÔ∏è Checkout repository"
        uses: actions/checkout@v4

      - name: "Install tools"
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: "üîß Setup java"
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '21'

      - name: "üîß Prepare environment"
        uses: graalvm/setup-graalvm@v1
        with:
          set-java-home: 'false'
          java-version: 21
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'

      - name: "Extract test path and library version"
        run: |
          LIBRARY_PATH=$(echo ${{ matrix.item }} | cut -d ':' -f1-2 | sed 's/:/\//g')
          LATEST_VERSION=$(find tests/src/$LIBRARY_PATH/* -maxdepth 1 -type d | sort -V | tail -1 | cut -d '/' -f5)
          TEST_PATH="$LIBRARY_PATH/$LATEST_VERSION"
          TEST_COORDINATES=$(echo "$TEST_PATH" | tr / :)
          
          echo "LATEST_VERSION=$LATEST_VERSION" >> ${GITHUB_ENV}
          echo "TEST_PATH=$TEST_PATH" >> ${GITHUB_ENV}
          echo "TEST_COORDINATES=$TEST_COORDINATES" >> ${GITHUB_ENV}

      - name: "Pull allowed docker images"
        run: |
          ./gradlew pullAllowedDockerImages --coordinates=${{ env.TEST_COORDINATES }}

      - name: "Disable docker"
        run: |
          sudo apt-get install openbsd-inetd
          sudo bash -c "cat ./.github/workflows/discard-port.conf >> /etc/inetd.conf"
          sudo systemctl start inetd
          sudo mkdir /etc/systemd/system/docker.service.d
          sudo bash -c "cat ./.github/workflows/dockerd.service > /etc/systemd/system/docker.service.d/http-proxy.conf"
          sudo systemctl daemon-reload
          sudo systemctl restart docker

      - name: "üß™ Run '${{ env.TEST_COORDINATES }}' tests"
        run: |
          TESTING_VERSION=$(echo ${{ matrix.item }} | cut -d ":" -f3)
          export GVM_TCK_LV=$TESTING_VERSION

          ./gradlew test -Pcoordinates=${{ env.TEST_COORDINATES }}

      - name: "‚úîÔ∏è New library is supported"
        if: success()
        run: |
          bash ./.github/workflows/tryPushVersionsUpdate.sh ${{ matrix.item }} ${{ env.LATEST_VERSION }} ${{ inputs.batch_id }}

      - name: "‚ùó New library is not supported"
        if: failure()
        run: |
          LIB=$(echo "${{ matrix.item }}" | sed 's/:/_/g')
          touch $LIB
          echo "UNSUPPORTED_LIB=$LIB" >> $GITHUB_ENV

      - name: "Upload artifacts"
        if: failure()
        id: upload
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UNSUPPORTED_LIB }}
          path: ${{ env.UNSUPPORTED_LIB }}
          retention-days: 1

  process-results:
    name: "üß™ Process results"
    runs-on: "ubuntu-22.04"
    if: ${{ always() }}
    needs:
      - process-batch
    permissions: write-all
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: "‚òÅÔ∏è Checkout repository"
        uses: actions/checkout@v4
      - name: "üîß Setup java"
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '21'
      - name: "‚úèÔ∏è PR for supported versions"
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "Github Actions"
          git fetch origin check-new-library-versions/batch-id-${{ inputs.batch_id }}/$(date '+%Y-%m-%d')
          git checkout check-new-library-versions/batch-id-${{ inputs.batch_id }}/$(date '+%Y-%m-%d')
          gh pr create --title "Update supported library versions" --body "This pull request updates supported versions of the existing libraries in the repo"
      - name: "Download artifacts for unsupported versions"
        uses: actions/download-artifact@v4
        with:
          path: ./unsupported
      - name: "‚úèÔ∏è Issue for unsupported versions"
        run: |
          if [ -d "unsupported" ]; then
          
            cd unsupported
            git config --local user.email "actions@github.com"
            git config --local user.name "Github Actions" 
          
            # Map from <group_artifact> to list of versions
            declare -A failures
          
            for FILENAME in *; do
              GROUPID=$(echo "$FILENAME" | cut -d'_' -f1)
              ARTIFACTID=$(echo "$FILENAME" | cut -d'_' -f2)
              VERSION=$(echo "$FILENAME" | cut -d'_' -f3)
              GA="${GROUPID}:${ARTIFACTID}"
              failures["$GA"]+="${VERSION}"$'\n'
            done
          
            for GA in "${!failures[@]}"; do
              TITLE="Failure for $GA"
              EXISTING_ISSUE_URL=$(gh issue list --state "open" --search "$TITLE" --json title,url | jq -r ".[] | select(.title==\"$TITLE\") | .url")
          
              BODY="${failures[$GA]}"
          
              if [ -n "$EXISTING_ISSUE_URL" ]; then
                # issue exists, just append new failures
                EXISTING_BODY=$(gh issue view "$EXISTING_ISSUE_URL" --json body -q .body)
          
                for VERSION in ${failures[$GA]}; do
                  if ! grep -q "$VERSION" <<< "$EXISTING_BODY"; then
                    EXISTING_BODY="${EXISTING_BODY}"$'\n'"$VERSION"
                  fi
                done
          
                gh issue edit "$EXISTING_ISSUE_URL" --body "$EXISTING_BODY"
              else
                # Create new issue with all versions
                gh issue create --title "$TITLE" --body "$BODY" --label library-update
              fi
            done
          fi
